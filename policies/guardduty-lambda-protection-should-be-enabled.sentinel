# This control checks whether 'aws_guardduty_detector' Lambda Protection is enabled. For a standalone account.
# the control fails if 'aws_guardduty_detector' Lambda Protection is disabled in the account.

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                     "guardduty-lambda-protection-should-be-enabled",
	"resource_aws_guardduty_detector": "aws_guardduty_detector",
	"message":                         "'aws_guardduty_detector' Lambda Protection should be enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/guardduty-controls.html#guardduty-6 for more details.",
	"malware_protection":              "malware_protection",
	"datasources":                 "datasources",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		datasources_values = maps.get(res.values, const.datasources, [])
		if datasources_values is null or datasources_values is empty {
			return false
		}
		malware_protection_values = maps.get(datasources_values[0], const.malware_protection, [])
		if malware_protection_values is null or malware_protection_values is empty {
			return false
		}
		return maps.get(malware_protection_values[0].scan_ec2_instance_with_findings[0].ebs_volumes[0], "enable", false)
	})
}

# Variables

aws_guardduty_detector = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_guardduty_detector).resources
violations = get_violations(aws_guardduty_detector)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
