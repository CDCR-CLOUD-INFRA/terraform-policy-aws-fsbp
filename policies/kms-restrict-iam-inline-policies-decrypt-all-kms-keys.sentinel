# This policy checks if resources of type 'aws_iam_policy_document'
# contain blocked action patterns such as 'kms:ReEncryptFrom' and 'kms:Decrypt'

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "json"

# Constants

const = {
	"policy_name":             "kms-restrict-iam-inline-policies-decrypt-all-kms-keys",
	"message":                 "Actions 'kms:ReEncryptFrom' and 'kms:Decrypt' must not be allowed on all 'KMS keys'. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/kms-controls.html#kms-2 for more details.",
	"resource_aws_iam_policy": "aws_iam_policy",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		policy_json = maps.get(res, "values.policy", "")
		policies = json.unmarshal(policy_json)
		for maps.get(policies, "Statement", []) as action {
			actions = maps.get(action, "Action", [])
			if "kms:ReEncryptFrom" in actions or "kms:Decrypt" in actions {
				return false
			}
		}
		return true
	})
}

# Variables

iam_inline_policies = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_iam_policy).resources
violations = get_violations(iam_inline_policies)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
