# This policy checks if resources of type 'aws_sagemaker_instance'
# is launched in custom vpc

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "json"
import "types"
import "strings"

# Constants
const = {
	"policy_name": "sagemaker-notebook-ensure-subnet-id-for-instance",
	"message":     "Attribute 'subnet_id' should be launched in custom vpc for AWS Sagemaker Notebook Instance. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/sagemaker-controls.html#sagemaker-2 for more details.",
	"resource_aws_sagemaker_notebook_instance": "aws_sagemaker_notebook_instance",
	"default_vpc_types":                        ["aws_default_subnet", "aws_default_vpc"],
}

# Functions

get_violations = func(resources, config_resources) {
	return collection.reject(resources, func(res) {
		if types.type_of(res.config.subnet_id) is "undefined" {
			return false
		}
		if maps.has(res.config.subnet_id, "constant_value") {
			return false
		}
		resource_aws_subnet_address = res.config.subnet_id.references[-1]
		resource_aws_subnet_id = strings.split(resource_aws_subnet_address, ".")[0]
		if resource_aws_subnet_id in const.default_vpc_types {
			return false
		}
		aws_vpc_resources = config_resources.address(resource_aws_subnet_address).resources[0].config
		resource_aws_vpc_address = aws_vpc_resources.vpc_id.references[-1]
		resource_aws_vpc_id = strings.split(resource_aws_vpc_address, ".")[0]
		if resource_aws_vpc_id in const.default_vpc_types {
			return false
		}
		return true
	})
}

# Variables

config_resources = tf.config(tfconfig.resources)
sagemaker_notebooks = config_resources.type(const.resource_aws_sagemaker_notebook_instance).resources
violations = get_violations(sagemaker_notebooks, config_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
