# This policy checks if resources of type 'aws_sagemaker_instance'
# is launched in custom vpc

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "json"
import "types"
import "strings"

# Constants
const = {
	"policy_name": "sagemaker-notebook-ensure-subnet-id-for-instance",
	"message":     "Attribute 'subnet_id' should be launched in custom vpc for AWS Sagemaker Notebook Instance. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/sagemaker-controls.html#sagemaker-2 for more details.",
	"resource_aws_sagemaker_notebook_instance": "aws_sagemaker_notebook_instance",
	"resource_aws_subnet": 		"aws_subnet",
	"resource_aws_vpc":  		"aws_vpc",
	"default_vpc_types":                        ["aws_default_subnet", "aws_default_vpc"],
	"address":		"address",
	"module_prefix":            "module.",
	"module_address":           "module_address",
}

# Functions

get_violations = func(resources, config_resources) {
	return collection.reject(resources, func(res) {
		if types.type_of(res.config.subnet_id) is "undefined" {
			return false
		}
		if maps.has(res.config.subnet_id, "constant_value") {
			return false
		}
		resource_aws_subnet_address = res.config.subnet_id.references[-1]
		resource_aws_subnet_id = strings.split(resource_aws_subnet_address, ".")[0]
		if resource_aws_subnet_id in const.default_vpc_types {
			return false
		}
		aws_subnet_resources = config_resources.type(const.resource_aws_subnet).resources
		resource_aws_vpc_address = false
		for aws_subnet_resources as aws_subnet_resource {
			aws_subnet_resource_without_module = resource_address_without_module_address(aws_subnet_resource)
			if resource_aws_subnet_address == aws_subnet_resource_without_module {
				resource_aws_vpc_address = aws_subnet_resource.config.vpc_id.references[-1]
			}
		}
		if resource_aws_vpc_address == false {
			return false
		}
		resource_aws_vpc_id = strings.split(resource_aws_vpc_address, ".")[0]
		if resource_aws_vpc_id in const.default_vpc_types {
			return false
		}
		return true
	})
}

# Removes module address prefix from a resource
# and returns back the localized address for a module.
resource_address_without_module_address = func(res) {
	resource_addr = res[const.address]
	# Check for root module
	if not strings.has_prefix(resource_addr, const.module_prefix) {
		return resource_addr
	}

	module_addr_prefix = res[const.module_address] + "."
	return strings.trim_prefix(resource_addr, module_addr_prefix)
}

# Variables

config_resources = tf.config(tfconfig.resources)
sagemaker_notebooks = config_resources.type(const.resource_aws_sagemaker_notebook_instance).resources
violations = get_violations(sagemaker_notebooks, config_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
