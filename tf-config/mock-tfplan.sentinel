import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"aws_sagemaker_notebook_instance": {
				"example": {
					0: {
						"applied": {
							"accelerator_types":                       null,
							"additional_code_repositories":            null,
							"default_code_repository":                 null,
							"direct_internet_access":                  "Enabled",
							"instance_metadata_service_configuration": [],
							"instance_type":                           "ml.t3.medium",
							"kms_key_id":                              null,
							"lifecycle_config_name":                   null,
							"name":                                    "example-notebook-instance",
							"role_arn":                                "arn:aws:iam::aws:*",
							"root_access":                             "Enabled",
							"subnet_id":                               "hfsjdhbcj",
							"tags":                                    null,
							"volume_size":                             5,
						},
						"destroy": false,
						"diff": {
							"accelerator_types": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"additional_code_repositories": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"arn": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"default_code_repository": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"direct_internet_access": {
								"computed": false,
								"new":      "Enabled",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"instance_metadata_service_configuration.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"instance_type": {
								"computed": false,
								"new":      "ml.t3.medium",
								"old":      "",
							},
							"kms_key_id": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"lifecycle_config_name": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "example-notebook-instance",
								"old":      "",
							},
							"network_interface_id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"platform_identifier": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"role_arn": {
								"computed": false,
								"new":      "arn:aws:iam::aws:*",
								"old":      "",
							},
							"root_access": {
								"computed": false,
								"new":      "Enabled",
								"old":      "",
							},
							"security_groups.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"subnet_id": {
								"computed": false,
								"new":      "hfsjdhbcj",
								"old":      "",
							},
							"tags": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"tags_all.%": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"url": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"volume_size": {
								"computed": false,
								"new":      "5",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "1.11.4"

variables = {}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
