import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config": {
							"region": "us-west-2",
						},
						"references": {
							"region": [],
						},
						"version": "~> 5.98.0",
					},
				},
				"config": {
					"region": "us-west-2",
				},
				"references": {
					"region": [],
				},
				"version": "~> 5.98.0",
			},
		},
		"resources": {
			"aws_sagemaker_notebook_instance": {
				"example": {
					"config": {
						"instance_type": "ml.t3.medium",
						"name":          "example-notebook-instance",
						"role_arn":      "arn:aws:iam::aws:*",
						"subnet_id":     "hfsjdhbcj",
					},
					"provisioners": null,
					"references": {
						"instance_type": [],
						"name":          [],
						"role_arn":      [],
						"subnet_id":     [],
					},
				},
			},
		},
		"variables": {},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
